package com.example.interviewprepaiassistant;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.GoogleAuthProvider;

/**
 * Activity responsible for handling user login and sign-up using both
 * Email/Password and Google Sign-In with Firebase Authentication.
 */
public class LoginActivity extends AppCompatActivity {

    private static final String TAG = "LoginActivity";

    private EditText emailEditText;
    private EditText passwordEditText;
    private Button signInEmailButton;
    private Button googleSignInButton;
    private FirebaseAuth mAuth;
    private GoogleSignInClient googleSignInClient;
    private ActivityResultLauncher<Intent> googleSignInLauncher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Uses the activity_login.xml layout
        setContentView(R.layout.activity_login);

        // 1. Initialize Firebase Auth
        mAuth = FirebaseAuth.getInstance();

        // 2. Check if user is already signed in (if so, skip login)
        if (mAuth.getCurrentUser() != null) {
            startMainActivity();
            return;
        }

        // 3. Initialize UI elements by mapping them to their IDs in activity_login.xml
        emailEditText = findViewById(R.id.editTextEmail);
        passwordEditText = findViewById(R.id.editTextPassword);
        signInEmailButton = findViewById(R.id.buttonSignInEmail);
        googleSignInButton = findViewById(R.id.buttonGoogleSignIn);

        // 4. Configure Google Sign-In
        // The default_web_client_id is generated by the google-services.json file
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken("138343414269-46s5s6g8oshv83vrvvph386mplt64429.apps.googleusercontent.com")
                .requestEmail()
                .build();
        googleSignInClient = GoogleSignIn.getClient(this, gso);

        // 5. Set up listeners

        // Email/Password Sign-In/Sign-Up
        signInEmailButton.setOnClickListener(v -> {
            String email = emailEditText.getText().toString().trim();
            String password = passwordEditText.getText().toString().trim();
            signInWithEmail(email, password);
        });

        // Google Sign-In
        googleSignInButton.setOnClickListener(v -> signInWithGoogle());

        // 6. Register the Activity Result Launcher for Google Sign-In
        googleSignInLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(result.getData());
                    try {
                        GoogleSignInAccount account = task.getResult(ApiException.class);
                        if (account != null && account.getIdToken() != null) {
                            firebaseAuthWithGoogle(account.getIdToken());
                        }
                    } catch (ApiException e) {
                        // Log the error and show a user-friendly message
                        Log.w(TAG, "Google sign in failed", e);
                        Toast.makeText(LoginActivity.this, "Google Sign-In failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    }
                });
    }

    /**
     * Attempts to sign in the user with email and password.
     * If sign-in fails, it attempts to create a new user.
     */
    private void signInWithEmail(String email, String password) {
        if (email.isEmpty() || password.isEmpty() || password.length() < 6) {
            Toast.makeText(this, "Enter valid email and a password (min 6 chars).", Toast.LENGTH_LONG).show();
            return;
        }

        mAuth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        Log.d(TAG, "signInWithEmail:success");
                        startMainActivity();
                    } else {
                        // If sign-in fails, try to create a new account (Sign Up)
                        mAuth.createUserWithEmailAndPassword(email, password)
                                .addOnCompleteListener(this, create_task -> {
                                    if (create_task.isSuccessful()) {
                                        Log.d(TAG, "createUserWithEmail:success");
                                        Toast.makeText(LoginActivity.this, "New account created and signed in.", Toast.LENGTH_SHORT).show();
                                        startMainActivity();
                                    } else {
                                        // If both sign-in and sign-up fail
                                        Log.w(TAG, "Authentication failed.", create_task.getException());
                                        Toast.makeText(LoginActivity.this, "Authentication failed. Check credentials or try Google sign-in.", Toast.LENGTH_LONG).show();
                                    }
                                });
                    }
                });
    }

    /**
     * Launches the Google Sign-In flow.
     */
    private void signInWithGoogle() {
        Intent signInIntent = googleSignInClient.getSignInIntent();
        googleSignInLauncher.launch(signInIntent);
    }

    /**
     * Exchanges the Google ID Token for a Firebase credential and signs in.
     */
    private void firebaseAuthWithGoogle(String idToken) {
        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        Log.d(TAG, "firebaseAuthWithGoogle:success");
                        startMainActivity();
                    } else {
                        Log.w(TAG, "firebaseAuthWithGoogle:failure", task.getException());
                        Toast.makeText(LoginActivity.this, "Google Authentication failed.", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    /**
     * Starts the main application activity and finishes the login activity.
     */
    private void startMainActivity() {
        Intent intent = new Intent(LoginActivity.this, MainActivity.class);
        startActivity(intent);
        finish();
    }
}
